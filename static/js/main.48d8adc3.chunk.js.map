{"version":3,"sources":["img/netflix.webp","img/tomatometer-rotten.svg","img/tomatometer-fresh.svg","serviceWorker.js","components/MenuBar.js","components/MediaCard.js","pages/Movies.js","pages/TVShows.js","App.js","ApolloProvider.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","MenuBar","pathname","path","substr","useState","activeItem","setActiveItem","handleItemClick","e","name","Menu","pointing","secondary","size","color","Item","src","active","onClick","as","Link","to","position","Input","transparent","icon","link","placeholder","MediaCard","movie","image","url","year","provider","rating","duration","genre","description","imdb_score","cast","rotten_tomatoes_score","metacritic_score","Card","fluid","href","target","Image","wrapped","ui","Content","Header","Meta","className","class","Description","extra","Netflix","rounded","parseInt","indexOf","Rotten","Fresh","GET_NETFLIX_MOVIES","gql","Movies","useQuery","loading","error","data","console","log","Grid","columns","Row","Loader","inline","netflix_movies","map","Column","key","style","marginBottom","GET_NETFLIX_TV_SHOWS","TVShows","netflix_tv_shows","App","Container","exact","component","client","ApolloClient","HttpLink","uri","headers","cache","InMemoryCache","ReactDOM","render","ApolloProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.48d8adc3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/netflix.5827529b.webp\";","module.exports = __webpack_public_path__ + \"static/media/tomatometer-rotten.f1ef4f02.svg\";","module.exports = __webpack_public_path__ + \"static/media/tomatometer-fresh.149b5e8a.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useState } from \"react\";\nimport { Menu, Input } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\n\nfunction MenuBar() {\n  const pathname = window.location.pathname;\n  const path = pathname === \"/\" ? \"Movies\" : pathname.substr(1) || pathname ===\"tvshows\" ? \"TV Shows\" : pathname.substr(1);\n\n  const [activeItem, setActiveItem] = useState(path);\n\n  const handleItemClick = (e, { name }) => {\n    setActiveItem(name);\n  }\n\n  return (\n      <Menu pointing secondary size=\"large\" color=\"orange\">\n      <Menu.Item>\n        <img src=\"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/160/apple/21/sailboat_26f5.png\" />\n      </Menu.Item>\n      <Menu.Item\n        name=\"Movies\"\n        active={activeItem === \"Movies\"}\n        onClick={handleItemClick}\n        as={Link}\n        to=\"\"\n      />\n      <Menu.Item\n        name=\"TV Shows\"\n        active={activeItem === \"TV Shows\"}\n        onClick={handleItemClick}\n        as={Link}\n        to=\"\"\n      />\n      <Menu.Menu position=\"right\">\n      <Menu.Item>\n            <Input\n              transparent\n              icon={{ name: \"search\", link: true }}\n              placeholder=\"Search...\"\n            />\n          </Menu.Item>\n      </Menu.Menu>\n    </Menu>\n  );\n}\n\nexport default MenuBar;","import React from \"react\";\nimport { Card, Image } from \"semantic-ui-react\";\nimport Netflix from \"../img/netflix.webp\"\nimport Rotten from \"../img/tomatometer-rotten.svg\"\nimport Fresh from \"../img/tomatometer-fresh.svg\"\n\nfunction MediaCard({ movie: { image, url, name, provider, year, rating, duration, genre, description, cast, imdb_score, rotten_tomatoes_score, metacritic_score } }) {\n\n  return (\n    <Card fluid color=\"orange\" href={url} target=\"_blank\">\n      <Image src={image} wrapped ui={false} />\n      <Card.Content>\n        <Card.Header>{name}</Card.Header>\n        <Card.Meta>\n          <span className=\"date\">{year}</span>\n          <b>|</b>\n          <div class=\"ui circular label\"><span className=\"rating\">{rating}</span></div>\n          <b>|</b>\n          <i class=\"clock icon\"></i><span className=\"duration\">{duration}</span>\n          <b>|</b>\n          <span className=\"genre\">{genre}</span>\n        </Card.Meta>\n        <Card.Description>{description}</Card.Description>\n      </Card.Content>\n      <Card.Content extra>\n          <div class=\"ui stackable four column grid\">\n            <div class=\"column\">\n              <Image class=\"ui image\" src={Netflix} size='mini' rounded />\n            </div>\n            <div class=\"column\">\n              <i class=\"large yellow star icon\"></i>\n              {imdb_score}\n            </div>\n            <div class=\"column\">\n              {parseInt(rotten_tomatoes_score.substr(0, rotten_tomatoes_score.indexOf('%'))) < 60 &&\n                <Image src={Rotten} size='mini' />\n              }\n              {parseInt(rotten_tomatoes_score.substr(0, rotten_tomatoes_score.indexOf('%'))) >= 60 &&\n                <Image src={Fresh} size='mini' />\n              }\n              {rotten_tomatoes_score}\n            </div>\n            <div class=\"column\">\n              {parseInt(metacritic_score.substr(0, metacritic_score.indexOf('/'))) > 60 &&\n                <div class=\"ui green label\">{metacritic_score.substr(0, metacritic_score.indexOf('/'))}</div>\n              }\n              {parseInt(metacritic_score.substr(0, metacritic_score.indexOf('/'))) >= 40 && parseInt(metacritic_score.substr(0, metacritic_score.indexOf('/'))) <= 60 &&\n                <div class=\"ui yellow label\">{metacritic_score.substr(0, metacritic_score.indexOf('/'))}</div>\n              }\n              {parseInt(metacritic_score.substr(0, metacritic_score.indexOf('/'))) < 40 &&\n                <div class=\"ui red label\">{metacritic_score.substr(0, metacritic_score.indexOf('/'))}</div>\n              }\n            </div>\n          </div>\n      </Card.Content>\n    </Card>\n  );\n}\n\nexport default MediaCard;\n","import React from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { Grid, Loader } from \"semantic-ui-react\";\nimport MediaCard from \"../components/MediaCard\";\n\nconst GET_NETFLIX_MOVIES = gql`\n  {\n    netflix_movies {\n      image\n      name\n      url\n      provider\n      year\n      rating\n      duration\n      genre\n      description\n      cast\n      imdb_score\n      rotten_tomatoes_score\n      metacritic_score\n    }\n  }\n`;\n\nfunction Movies() {\n  const { loading, error, data } = useQuery(GET_NETFLIX_MOVIES);\n  if (data) {\n    console.log(data);\n  }\n  else if(error){\n    console.log(error)\n  }\n  return (\n    <Grid columns={3}>\n      <Grid.Row>\n        {loading ? (\n          <Loader active inline=\"centered\" size=\"big\">\n            Preparing your movies...\n          </Loader>\n        ) : (\n          data.netflix_movies &&\n          data.netflix_movies.map(movie => (\n            <Grid.Column key={movie.name} style={{ marginBottom: 20 }}>\n              <MediaCard movie={movie} />\n            </Grid.Column>\n          ))\n        )}\n      </Grid.Row>\n    </Grid>\n  );\n}\n\nexport default Movies;\n","import React from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { Grid, Loader } from \"semantic-ui-react\";\nimport MediaCard from \"../components/MediaCard\";\n\nconst GET_NETFLIX_TV_SHOWS = gql`\n  {\n    netflix_tv_shows {\n      image\n      name\n      url\n      provider\n      year\n      rating\n      duration\n      genre\n      description\n      cast\n      imdb_score\n      rotten_tomatoes_score\n      metacritic_score\n    }\n  }\n`;\n\nfunction TVShows() {\n  const { loading, error, data } = useQuery(GET_NETFLIX_TV_SHOWS);\n  if (data) {\n    console.log(data);\n  }\n  else if(error){\n    console.log(error)\n  }\n  return (\n    <Grid columns={3}>\n      <Grid.Row>\n        {loading ? (\n          <Loader active inline=\"centered\" size=\"big\">\n            Preparing your TV Shows...\n          </Loader>\n        ) : (\n          data.netflix_tv_shows &&\n          data.netflix_tv_shows.map(movie => (\n            <Grid.Column key={movie.name} style={{ marginBottom: 20 }}>\n              <MediaCard movie={movie} />\n            </Grid.Column>\n          ))\n        )}\n      </Grid.Row>\n    </Grid>\n  );\n}\n\nexport default TVShows;\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport \"semantic-ui-css/semantic.min.css\";\nimport MenuBar from \"./components/MenuBar\";\nimport Movies from \"./pages/Movies\";\nimport TVShows from \"./pages/TVShows\";\n\nimport { Container } from \"semantic-ui-react\";\n\nfunction App() {\n  return (\n    <Router>\n      <Container>\n        <MenuBar />\n        <Route exact path=\"\" component={Movies} />\n        <Route exact path=\"/tvshows\" component={TVShows} />\n      </Container>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ApolloClient from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport App from './App';\n\nconst client = new ApolloClient({\n    link: new HttpLink({\n      uri: 'https://streamship.herokuapp.com/v1/graphql',\n      headers: {\n      }\n    }),\n    cache: new InMemoryCache(),\n  });\n export default (\n     <ApolloProvider client = {client}>\n        <App/>\n     </ApolloProvider>\n )","import ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport ApolloProvider from './ApolloProvider'\n\nReactDOM.render(ApolloProvider, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}