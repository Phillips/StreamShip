{"ast":null,"code":"import _taggedTemplateLiteral from\"/Users/andrew/Documents/Programming/StreamShip/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";function _templateObject(){var data=_taggedTemplateLiteral([\"\\n  {\\n    netflix_tv_shows {\\n      image\\n      name\\n      url\\n      provider\\n      year\\n      rating\\n      duration\\n      genre\\n      description\\n      cast\\n      imdb_score\\n      rotten_tomatoes_score\\n      metacritic_score\\n    }\\n  }\\n\"]);_templateObject=function _templateObject(){return data;};return data;}import React from\"react\";import gql from\"graphql-tag\";import{useQuery}from\"@apollo/react-hooks\";import{Grid,Loader}from\"semantic-ui-react\";import MediaCard from\"../components/MediaCard\";var GET_NETFLIX_TV_SHOWS=gql(_templateObject());function TVShows(){var _useQuery=useQuery(GET_NETFLIX_TV_SHOWS),loading=_useQuery.loading,error=_useQuery.error,data=_useQuery.data;if(data){console.log(data);}else if(error){console.log(error);}return React.createElement(Grid,{columns:3},React.createElement(Grid.Row,null,loading?React.createElement(Loader,{active:true,inline:\"centered\",size:\"big\"},\"Preparing your TV Shows...\"):data.netflix_tv_shows&&data.netflix_tv_shows.map(function(movie){return React.createElement(Grid.Column,{key:movie.name,style:{marginBottom:20}},React.createElement(MediaCard,{movie:movie}));})));}export default TVShows;","map":{"version":3,"sources":["/Users/andrew/Documents/Programming/StreamShip/src/pages/TVShows.js"],"names":["React","gql","useQuery","Grid","Loader","MediaCard","GET_NETFLIX_TV_SHOWS","TVShows","loading","error","data","console","log","netflix_tv_shows","map","movie","name","marginBottom"],"mappings":"wjBAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,GAAP,KAAgB,aAAhB,CACA,OAASC,QAAT,KAAyB,qBAAzB,CACA,OAASC,IAAT,CAAeC,MAAf,KAA6B,mBAA7B,CACA,MAAOC,CAAAA,SAAP,KAAsB,yBAAtB,CAEA,GAAMC,CAAAA,oBAAoB,CAAGL,GAAH,mBAA1B,CAoBA,QAASM,CAAAA,OAAT,EAAmB,eACgBL,QAAQ,CAACI,oBAAD,CADxB,CACTE,OADS,WACTA,OADS,CACAC,KADA,WACAA,KADA,CACOC,IADP,WACOA,IADP,CAEjB,GAAIA,IAAJ,CAAU,CACRC,OAAO,CAACC,GAAR,CAAYF,IAAZ,EACD,CAFD,IAGK,IAAGD,KAAH,CAAS,CACZE,OAAO,CAACC,GAAR,CAAYH,KAAZ,EACD,CACD,MACE,qBAAC,IAAD,EAAM,OAAO,CAAE,CAAf,EACE,oBAAC,IAAD,CAAM,GAAN,MACGD,OAAO,CACN,oBAAC,MAAD,EAAQ,MAAM,KAAd,CAAe,MAAM,CAAC,UAAtB,CAAiC,IAAI,CAAC,KAAtC,+BADM,CAKNE,IAAI,CAACG,gBAAL,EACAH,IAAI,CAACG,gBAAL,CAAsBC,GAAtB,CAA0B,SAAAC,KAAK,QAC7B,qBAAC,IAAD,CAAM,MAAN,EAAa,GAAG,CAAEA,KAAK,CAACC,IAAxB,CAA8B,KAAK,CAAE,CAAEC,YAAY,CAAE,EAAhB,CAArC,EACE,oBAAC,SAAD,EAAW,KAAK,CAAEF,KAAlB,EADF,CAD6B,EAA/B,CAPJ,CADF,CADF,CAkBD,CAED,cAAeR,CAAAA,OAAf","sourcesContent":["import React from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { Grid, Loader } from \"semantic-ui-react\";\nimport MediaCard from \"../components/MediaCard\";\n\nconst GET_NETFLIX_TV_SHOWS = gql`\n  {\n    netflix_tv_shows {\n      image\n      name\n      url\n      provider\n      year\n      rating\n      duration\n      genre\n      description\n      cast\n      imdb_score\n      rotten_tomatoes_score\n      metacritic_score\n    }\n  }\n`;\n\nfunction TVShows() {\n  const { loading, error, data } = useQuery(GET_NETFLIX_TV_SHOWS);\n  if (data) {\n    console.log(data);\n  }\n  else if(error){\n    console.log(error)\n  }\n  return (\n    <Grid columns={3}>\n      <Grid.Row>\n        {loading ? (\n          <Loader active inline=\"centered\" size=\"big\">\n            Preparing your TV Shows...\n          </Loader>\n        ) : (\n          data.netflix_tv_shows &&\n          data.netflix_tv_shows.map(movie => (\n            <Grid.Column key={movie.name} style={{ marginBottom: 20 }}>\n              <MediaCard movie={movie} />\n            </Grid.Column>\n          ))\n        )}\n      </Grid.Row>\n    </Grid>\n  );\n}\n\nexport default TVShows;\n"]},"metadata":{},"sourceType":"module"}