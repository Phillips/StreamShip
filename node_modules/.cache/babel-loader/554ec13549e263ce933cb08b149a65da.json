{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/andrew/Documents/Programming/StreamShip/website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/andrew/Documents/Programming/StreamShip/website/src/pages/TVShows.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  {\\n    netflix_tv_shows {\\n      image\\n      name\\n      url\\n      provider\\n      year\\n      rating\\n      duration\\n      genre\\n      description\\n      cast\\n      imdb_score\\n      rotten_tomatoes_score\\n      metacritic_score\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { Grid, Loader } from \"semantic-ui-react\";\nimport MediaCard from \"../components/MediaCard\";\nconst GET_NETFLIX_TV_SHOWS = gql(_templateObject());\n\nfunction TVShows() {\n  const _useQuery = useQuery(GET_NETFLIX_TV_SHOWS),\n        loading = _useQuery.loading,\n        error = _useQuery.error,\n        data = _useQuery.data;\n\n  if (data) {\n    console.log(data);\n  } else if (error) {\n    console.log(error);\n  }\n\n  return React.createElement(Grid, {\n    columns: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(Grid.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, loading ? React.createElement(Loader, {\n    active: true,\n    inline: \"centered\",\n    size: \"big\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"Preparing your TV Shows...\") : data.netflix_tv_shows && data.netflix_tv_shows.map(movie => React.createElement(Grid.Column, {\n    key: movie.name,\n    style: {\n      marginBottom: 20\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(MediaCard, {\n    movie: movie,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  })))));\n}\n\nexport default TVShows;","map":{"version":3,"sources":["/Users/andrew/Documents/Programming/StreamShip/website/src/pages/TVShows.js"],"names":["React","gql","useQuery","Grid","Loader","MediaCard","GET_NETFLIX_TV_SHOWS","TVShows","loading","error","data","console","log","netflix_tv_shows","map","movie","name","marginBottom"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,mBAA7B;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AAEA,MAAMC,oBAAoB,GAAGL,GAAH,mBAA1B;;AAoBA,SAASM,OAAT,GAAmB;AAAA,oBACgBL,QAAQ,CAACI,oBAAD,CADxB;AAAA,QACTE,OADS,aACTA,OADS;AAAA,QACAC,KADA,aACAA,KADA;AAAA,QACOC,IADP,aACOA,IADP;;AAEjB,MAAIA,IAAJ,EAAU;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACD,GAFD,MAGK,IAAGD,KAAH,EAAS;AACZE,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACD;;AACD,SACE,oBAAC,IAAD;AAAM,IAAA,OAAO,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD,CAAM,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,OAAO,GACN,oBAAC,MAAD;AAAQ,IAAA,MAAM,MAAd;AAAe,IAAA,MAAM,EAAC,UAAtB;AAAiC,IAAA,IAAI,EAAC,KAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADM,GAKNE,IAAI,CAACG,gBAAL,IACAH,IAAI,CAACG,gBAAL,CAAsBC,GAAtB,CAA0BC,KAAK,IAC7B,oBAAC,IAAD,CAAM,MAAN;AAAa,IAAA,GAAG,EAAEA,KAAK,CAACC,IAAxB;AAA8B,IAAA,KAAK,EAAE;AAAEC,MAAAA,YAAY,EAAE;AAAhB,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAEF,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CAPJ,CADF,CADF;AAkBD;;AAED,eAAeR,OAAf","sourcesContent":["import React from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { Grid, Loader } from \"semantic-ui-react\";\nimport MediaCard from \"../components/MediaCard\";\n\nconst GET_NETFLIX_TV_SHOWS = gql`\n  {\n    netflix_tv_shows {\n      image\n      name\n      url\n      provider\n      year\n      rating\n      duration\n      genre\n      description\n      cast\n      imdb_score\n      rotten_tomatoes_score\n      metacritic_score\n    }\n  }\n`;\n\nfunction TVShows() {\n  const { loading, error, data } = useQuery(GET_NETFLIX_TV_SHOWS);\n  if (data) {\n    console.log(data);\n  }\n  else if(error){\n    console.log(error)\n  }\n  return (\n    <Grid columns={3}>\n      <Grid.Row>\n        {loading ? (\n          <Loader active inline=\"centered\" size=\"big\">\n            Preparing your TV Shows...\n          </Loader>\n        ) : (\n          data.netflix_tv_shows &&\n          data.netflix_tv_shows.map(movie => (\n            <Grid.Column key={movie.name} style={{ marginBottom: 20 }}>\n              <MediaCard movie={movie} />\n            </Grid.Column>\n          ))\n        )}\n      </Grid.Row>\n    </Grid>\n  );\n}\n\nexport default TVShows;\n"]},"metadata":{},"sourceType":"module"}